"use strict";(self.webpackChunkcurvine_doc=self.webpackChunkcurvine_doc||[]).push([[8110],{6208:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>n,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"User-Manuals/conf","title":"Configuration Reference","description":"This chapter provides detailed descriptions of Curvine configuration options.","source":"@site/docs/3-User-Manuals/06-conf.md","sourceDirName":"3-User-Manuals","slug":"/User-Manuals/conf","permalink":"/docs/User-Manuals/conf","draft":false,"unlisted":false,"editUrl":"https://github.com/curvineio/curvine-doc/edit/main/docs/3-User-Manuals/06-conf.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Performance Tuning","permalink":"/docs/User-Manuals/opt"},"next":{"title":"Benchmark","permalink":"/docs/category/benchmark"}}');var d=t(4848),i=t(8453);const n={},c="Configuration Reference",l={},h=[{value:"Cluster Configuration",id:"cluster-configuration",level:2},{value:"Master Configuration",id:"master-configuration",level:2},{value:"Journal Configuration",id:"journal-configuration",level:2},{value:"Worker Configuration",id:"worker-configuration",level:2},{value:"Worker Data Loading Configuration",id:"worker-data-loading-configuration",level:3},{value:"Client Configuration",id:"client-configuration",level:2},{value:"FUSE Configuration",id:"fuse-configuration",level:2}];function o(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(r.header,{children:(0,d.jsx)(r.h1,{id:"configuration-reference",children:"Configuration Reference"})}),"\n",(0,d.jsx)(r.p,{children:"This chapter provides detailed descriptions of Curvine configuration options."}),"\n",(0,d.jsx)(r.h2,{id:"cluster-configuration",children:"Cluster Configuration"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Configuration Item"}),(0,d.jsx)(r.th,{children:"Default Value"}),(0,d.jsx)(r.th,{children:"Description"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"format_master"}),(0,d.jsx)(r.td,{children:"true"}),(0,d.jsx)(r.td,{children:"Controls whether to format Master metadata storage"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"format_worker"}),(0,d.jsx)(r.td,{children:"true"}),(0,d.jsx)(r.td,{children:"Controls whether to format Worker data storage"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"testing"}),(0,d.jsx)(r.td,{children:"false"}),(0,d.jsx)(r.td,{children:"Marks whether in testing mode, data flow is disabled in testing mode"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"cluster_id"}),(0,d.jsx)(r.td,{children:"curve"}),(0,d.jsx)(r.td,{children:"Unique identifier for the cluster"})]})]})]}),"\n",(0,d.jsx)(r.h2,{id:"master-configuration",children:"Master Configuration"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Configuration Item"}),(0,d.jsx)(r.th,{children:"Default Value"}),(0,d.jsx)(r.th,{children:"Description"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.hostname"}),(0,d.jsx)(r.td,{children:"localhost"}),(0,d.jsx)(r.td,{children:"Master service hostname, can be overridden by environment variable CURVINE_MASTER_HOSTNAME"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.rpc_port"}),(0,d.jsx)(r.td,{children:"8995"}),(0,d.jsx)(r.td,{children:"Master service RPC port"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.web_port"}),(0,d.jsx)(r.td,{children:"9000"}),(0,d.jsx)(r.td,{children:"Master service Web port"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.io_threads"}),(0,d.jsx)(r.td,{children:"32"}),(0,d.jsx)(r.td,{children:"Number of Master service I/O threads"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.worker_threads"}),(0,d.jsx)(r.td,{children:"CPU cores * 2"}),(0,d.jsx)(r.td,{children:"Number of Master service worker threads"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.io_timeout"}),(0,d.jsx)(r.td,{children:"10m"}),(0,d.jsx)(r.td,{children:"Master network read/write data timeout"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.io_close_idle"}),(0,d.jsx)(r.td,{children:"true"}),(0,d.jsx)(r.td,{children:"Whether to close idle connections"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.meta_dir"}),(0,d.jsx)(r.td,{children:"./fs-meta"}),(0,d.jsx)(r.td,{children:"Metadata storage directory"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.meta_disable_wal"}),(0,d.jsx)(r.td,{children:"true"}),(0,d.jsx)(r.td,{children:"Whether to disable RocksDB's Write-Ahead Log (WAL)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.meta_compression_type"}),(0,d.jsx)(r.td,{children:"none"}),(0,d.jsx)(r.td,{children:"Compression type for metadata storage"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.meta_db_write_buffer_size"}),(0,d.jsx)(r.td,{children:"0"}),(0,d.jsx)(r.td,{children:"Database write buffer size for metadata storage"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.meta_write_buffer_size"}),(0,d.jsx)(r.td,{children:"64MB"}),(0,d.jsx)(r.td,{children:"Write buffer size for metadata storage"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.min_block_size"}),(0,d.jsx)(r.td,{children:"1024 * 1024"}),(0,d.jsx)(r.td,{children:"Minimum block_size"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.max_block_size"}),(0,d.jsx)(r.td,{children:"100 * 1024 * 1024 * 1024"}),(0,d.jsx)(r.td,{children:"Maximum block_size"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.min_replication"}),(0,d.jsx)(r.td,{children:"1"}),(0,d.jsx)(r.td,{children:"Minimum number of replicas"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.max_replication"}),(0,d.jsx)(r.td,{children:"100"}),(0,d.jsx)(r.td,{children:"Maximum number of replicas"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.max_path_len"}),(0,d.jsx)(r.td,{children:"8000"}),(0,d.jsx)(r.td,{children:"Maximum path length"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.max_path_depth"}),(0,d.jsx)(r.td,{children:"1000"}),(0,d.jsx)(r.td,{children:"Maximum path depth"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.retry_cache_enable"}),(0,d.jsx)(r.td,{children:"true"}),(0,d.jsx)(r.td,{children:"Whether to enable filesystem request retry cache"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.retry_cache_size"}),(0,d.jsx)(r.td,{children:"100_000"}),(0,d.jsx)(r.td,{children:"Size of retry cache"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.retry_cache_ttl"}),(0,d.jsx)(r.td,{children:"10m"}),(0,d.jsx)(r.td,{children:"Expiration time of retry cache"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.block_report_limit"}),(0,d.jsx)(r.td,{children:"1000"}),(0,d.jsx)(r.td,{children:"Block report limit, maximum number of blocks allowed per report"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.worker_policy"}),(0,d.jsx)(r.td,{children:"local"}),(0,d.jsx)(r.td,{children:"Worker selection policy, default local, prioritizes workers on the same node as client"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.executor_threads"}),(0,d.jsx)(r.td,{children:"10"}),(0,d.jsx)(r.td,{children:"Number of master background task executor threads"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.executor_channel_size"}),(0,d.jsx)(r.td,{children:"1000"}),(0,d.jsx)(r.td,{children:"Master background task executor channel size"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.heartbeat_check_interval"}),(0,d.jsx)(r.td,{children:"5m"}),(0,d.jsx)(r.td,{children:"Interval for Master to check Worker heartbeats"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.heartbeat_interval"}),(0,d.jsx)(r.td,{children:"3s"}),(0,d.jsx)(r.td,{children:"Interval for Worker to send heartbeats"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.audit_logging_enabled"}),(0,d.jsx)(r.td,{children:"true"}),(0,d.jsx)(r.td,{children:"Whether to enable audit logging"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"master.log"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:'{level: "info", log_dir: "stdout"}'})}),(0,d.jsx)(r.td,{children:"Master log configuration, defaults to stdout output"})]})]})]}),"\n",(0,d.jsx)(r.h2,{id:"journal-configuration",children:"Journal Configuration"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Configuration Item"}),(0,d.jsx)(r.th,{children:"Default Value"}),(0,d.jsx)(r.th,{children:"Description"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"enable"}),(0,d.jsx)(r.td,{children:"true"}),(0,d.jsx)(r.td,{children:"If raft log sync is enabled, logs will be synchronized; if disabled, equivalent to single-node system"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"group_name"}),(0,d.jsx)(r.td,{children:"raft-group"}),(0,d.jsx)(r.td,{children:"Raft group name"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"rpc_port"}),(0,d.jsx)(r.td,{children:"8996"}),(0,d.jsx)(r.td,{children:"RPC port number"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"io_threads"}),(0,d.jsx)(r.td,{children:"8"}),(0,d.jsx)(r.td,{children:"Number of I/O threads"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"worker_threads"}),(0,d.jsx)(r.td,{children:"8"}),(0,d.jsx)(r.td,{children:"Number of worker threads"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"message_size"}),(0,d.jsx)(r.td,{children:"200"}),(0,d.jsx)(r.td,{children:"Message size"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"journal_addrs"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:'{id: 1, hostname: "localhost", port: 8996}'})}),(0,d.jsx)(r.td,{children:"List of Master candidate node addresses"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"journal_dir"}),(0,d.jsx)(r.td,{children:"./journal"}),(0,d.jsx)(r.td,{children:"Raft log storage directory"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"writer_debug"}),(0,d.jsx)(r.td,{children:"false"}),(0,d.jsx)(r.td,{children:"Whether to enable debug mode for write operations, prints each log entry when enabled"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"writer_channel_size"}),(0,d.jsx)(r.td,{children:"0"}),(0,d.jsx)(r.td,{children:"Buffer queue size for journal writing, defaults to unbounded queue"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"writer_flush_batch_size"}),(0,d.jsx)(r.td,{children:"1000"}),(0,d.jsx)(r.td,{children:"Number of entries for write operation batch flush"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"writer_flush_batch_ms"}),(0,d.jsx)(r.td,{children:"100"}),(0,d.jsx)(r.td,{children:"Time interval for write operation batch flush (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"snapshot_interval"}),(0,d.jsx)(r.td,{children:"6h"}),(0,d.jsx)(r.td,{children:"Snapshot creation interval"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"snapshot_entries"}),(0,d.jsx)(r.td,{children:"100_000"}),(0,d.jsx)(r.td,{children:"Number of entries generated after creating snapshot"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"snapshot_read_chunk_size"}),(0,d.jsx)(r.td,{children:"1024 * 1024"}),(0,d.jsx)(r.td,{children:"Snapshot read chunk size"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"conn_retry_max_duration_ms"}),(0,d.jsx)(r.td,{children:"0"}),(0,d.jsx)(r.td,{children:"Maximum duration for connection retry (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"conn_retry_min_sleep_ms"}),(0,d.jsx)(r.td,{children:"10 * 1000"}),(0,d.jsx)(r.td,{children:"Minimum sleep time for connection retry (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"conn_retry_max_sleep_ms"}),(0,d.jsx)(r.td,{children:"10 * 1000"}),(0,d.jsx)(r.td,{children:"Maximum sleep time for connection retry (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"rpc_close_idle"}),(0,d.jsx)(r.td,{children:"false"}),(0,d.jsx)(r.td,{children:"Whether to close idle RPC connections"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"rpc_retry_max_duration_ms"}),(0,d.jsx)(r.td,{children:"60 * 1000"}),(0,d.jsx)(r.td,{children:"Maximum duration for RPC request retry (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"rpc_retry_min_sleep_ms"}),(0,d.jsx)(r.td,{children:"20 * 1000"}),(0,d.jsx)(r.td,{children:"Minimum sleep time for RPC request retry (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"rpc_retry_max_sleep_ms"}),(0,d.jsx)(r.td,{children:"20 * 1000"}),(0,d.jsx)(r.td,{children:"Maximum sleep time for RPC request retry (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"conn_timeout_ms"}),(0,d.jsx)(r.td,{children:"30 * 1000"}),(0,d.jsx)(r.td,{children:"Connection timeout (milliseconds), default 30 seconds"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"io_timeout_ms"}),(0,d.jsx)(r.td,{children:"60 * 1000"}),(0,d.jsx)(r.td,{children:"Socket data read/write timeout (milliseconds), default 60 seconds"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"conn_size"}),(0,d.jsx)(r.td,{children:"1"}),(0,d.jsx)(r.td,{children:"Number of available connections when sharing connections"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"raft_poll_interval_ms"}),(0,d.jsx)(r.td,{children:"100"}),(0,d.jsx)(r.td,{children:"Raft polling interval (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"raft_tick_interval_ms"}),(0,d.jsx)(r.td,{children:"1000"}),(0,d.jsx)(r.td,{children:"Raft heartbeat interval (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"raft_election_tick"}),(0,d.jsx)(r.td,{children:"10"}),(0,d.jsx)(r.td,{children:"Raft election timeout cycles"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"raft_heartbeat_tick"}),(0,d.jsx)(r.td,{children:"3"}),(0,d.jsx)(r.td,{children:"Raft heartbeat timeout cycles"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"raft_min_election_ticks"}),(0,d.jsx)(r.td,{children:"10"}),(0,d.jsx)(r.td,{children:"Raft minimum election timeout cycles"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"raft_max_election_ticks"}),(0,d.jsx)(r.td,{children:"30"}),(0,d.jsx)(r.td,{children:"Raft maximum election timeout cycles"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"raft_check_quorum"}),(0,d.jsx)(r.td,{children:"true"}),(0,d.jsx)(r.td,{children:"Whether to check quorum"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"raft_max_size_per_msg"}),(0,d.jsx)(r.td,{children:"1024 * 1024"}),(0,d.jsx)(r.td,{children:"Maximum size per message"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"raft_max_inflight_msgs"}),(0,d.jsx)(r.td,{children:"256"}),(0,d.jsx)(r.td,{children:"Maximum number of unacknowledged messages"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"raft_max_committed_size_per_ready"}),(0,d.jsx)(r.td,{children:"16 * 1024 * 1024"}),(0,d.jsx)(r.td,{children:"Maximum commit size per ready state"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"raft_retry_cache_size"}),(0,d.jsx)(r.td,{children:"100_000"}),(0,d.jsx)(r.td,{children:"Raft request retry cache size, prevents duplicate requests"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"raft_retry_cache_ttl"}),(0,d.jsx)(r.td,{children:"10m"}),(0,d.jsx)(r.td,{children:"Expiration time for raft request retry cache"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"retain_checkpoint_num"}),(0,d.jsx)(r.td,{children:"3"}),(0,d.jsx)(r.td,{children:"Number of checkpoints to retain"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"ignore_replay_error"}),(0,d.jsx)(r.td,{children:"false"}),(0,d.jsx)(r.td,{children:"Whether to ignore errors during log replay"})]})]})]}),"\n",(0,d.jsx)(r.h2,{id:"worker-configuration",children:"Worker Configuration"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Configuration Item"}),(0,d.jsx)(r.th,{children:"Default Value"}),(0,d.jsx)(r.th,{children:"Description"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"worker.dir_reserved"}),(0,d.jsx)(r.td,{children:"0"}),(0,d.jsx)(r.td,{children:"Directory reserved space configuration"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"worker.data_dir"}),(0,d.jsx)(r.td,{children:"vec![]"}),(0,d.jsx)(r.td,{children:"Worker data directory list"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"worker.io_slow_threshold"}),(0,d.jsx)(r.td,{children:"300ms"}),(0,d.jsx)(r.td,{children:"Worker I/O operation slow threshold, operations exceeding this time are considered slow"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"worker.io_threads"}),(0,d.jsx)(r.td,{children:"32"}),(0,d.jsx)(r.td,{children:"Number of Worker network I/O threads"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"worker.worker_threads"}),(0,d.jsx)(r.td,{children:"CPU cores * 2"}),(0,d.jsx)(r.td,{children:"Number of Worker worker threads"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"worker.io_timeout"}),(0,d.jsx)(r.td,{children:"10m"}),(0,d.jsx)(r.td,{children:"Worker network read/write data timeout"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"worker.io_close_idle"}),(0,d.jsx)(r.td,{children:"false"}),(0,d.jsx)(r.td,{children:"Whether to close idle connections, defaults to false since client doesn't implement heartbeat mechanism; uses keepalive to check connection validity"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"worker.scheduler_threads"}),(0,d.jsx)(r.td,{children:"2"}),(0,d.jsx)(r.td,{children:"Number of background scheduling task threads"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"worker.executor_threads"}),(0,d.jsx)(r.td,{children:"10"}),(0,d.jsx)(r.td,{children:"Number of background asynchronous task threads"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"worker.executor_channel_size"}),(0,d.jsx)(r.td,{children:"1000"}),(0,d.jsx)(r.td,{children:"Background asynchronous task queue size"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"worker.log"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:'{level: "info", log_dir: "stdout"}'})}),(0,d.jsx)(r.td,{children:"Worker log configuration, defaults to stdout output"})]})]})]}),"\n",(0,d.jsx)(r.h3,{id:"worker-data-loading-configuration",children:"Worker Data Loading Configuration"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Configuration Item"}),(0,d.jsx)(r.th,{children:"Default Value"}),(0,d.jsx)(r.th,{children:"Description"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"worker.load.task_status_report_interval_ms"}),(0,d.jsx)(r.td,{children:"5000"}),(0,d.jsx)(r.td,{children:"Progress report interval (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"worker.load.task_read_chunk_size_bytes"}),(0,d.jsx)(r.td,{children:"1024 * 1024"}),(0,d.jsx)(r.td,{children:"Default chunk size (bytes)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"worker.load.task_transfer_buffer_count"}),(0,d.jsx)(r.td,{children:"16"}),(0,d.jsx)(r.td,{children:"Default buffer cache count"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"worker.load.task_timeout_seconds"}),(0,d.jsx)(r.td,{children:"3600"}),(0,d.jsx)(r.td,{children:"Task timeout (seconds), -1 means no timeout"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"worker.load.task_transfer_max_concurrent_tasks"}),(0,d.jsx)(r.td,{children:"5"}),(0,d.jsx)(r.td,{children:"Maximum concurrent tasks"})]})]})]}),"\n",(0,d.jsx)(r.h2,{id:"client-configuration",children:"Client Configuration"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Configuration Item"}),(0,d.jsx)(r.th,{children:"Default Value"}),(0,d.jsx)(r.th,{children:"Description"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.master_addrs"}),(0,d.jsx)(r.td,{children:"localhost:8995"}),(0,d.jsx)(r.td,{children:"Master node address list"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.hostname"}),(0,d.jsx)(r.td,{children:"localhost"}),(0,d.jsx)(r.td,{children:"Hostname of the machine where client is located, needs to be set in certain scenarios to identify if client and worker nodes are on the same machine"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.io_threads"}),(0,d.jsx)(r.td,{children:"16"}),(0,d.jsx)(r.td,{children:"Number of client I/O threads"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.worker_threads"}),(0,d.jsx)(r.td,{children:"CPU cores * 2"}),(0,d.jsx)(r.td,{children:"Number of client worker threads"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.replicas"}),(0,d.jsx)(r.td,{children:"1"}),(0,d.jsx)(r.td,{children:"Default number of replicas"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.block_size"}),(0,d.jsx)(r.td,{children:"128MB"}),(0,d.jsx)(r.td,{children:"Block size (bytes), actual value converted from block_size_str"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.write_chunk_size"}),(0,d.jsx)(r.td,{children:"128KB"}),(0,d.jsx)(r.td,{children:"Write buffer size"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.write_chunk_num"}),(0,d.jsx)(r.td,{children:"8"}),(0,d.jsx)(r.td,{children:"Write buffer queue length"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.read_chunk_size"}),(0,d.jsx)(r.td,{children:"128KB"}),(0,d.jsx)(r.td,{children:"Read buffer size"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.read_chunk_num"}),(0,d.jsx)(r.td,{children:"32"}),(0,d.jsx)(r.td,{children:"Read buffer queue length"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.read_parallel"}),(0,d.jsx)(r.td,{children:"1"}),(0,d.jsx)(r.td,{children:"Parallelism for reading files"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.read_slice_size"}),(0,d.jsx)(r.td,{children:"0"}),(0,d.jsx)(r.td,{children:"Read slice size (bytes), default value is read_chunk_size * read_chunk_num"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.close_reader_limit"}),(0,d.jsx)(r.td,{children:"20"}),(0,d.jsx)(r.td,{children:"In random read scenarios, if block switching due to seek operations exceeds this value, all block readers will be cached"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.short_circuit"}),(0,d.jsx)(r.td,{children:"true"}),(0,d.jsx)(r.td,{children:"Whether to enable short-circuit functionality"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.storage_type"}),(0,d.jsx)(r.td,{children:"disk"}),(0,d.jsx)(r.td,{children:"Default storage type"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.ttl_ms"}),(0,d.jsx)(r.td,{children:"0"}),(0,d.jsx)(r.td,{children:"Default data cache time (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.ttl_action"}),(0,d.jsx)(r.td,{children:"none"}),(0,d.jsx)(r.td,{children:"Action after cache expiration"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.auto_cache_enabled"}),(0,d.jsx)(r.td,{children:"false"}),(0,d.jsx)(r.td,{children:"Whether to enable auto-cache functionality, when enabled, reading files from external filesystem will automatically submit load requests to master and cache files"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.auto_cache_ttl"}),(0,d.jsx)(r.td,{children:"7d"}),(0,d.jsx)(r.td,{children:"Default TTL for auto-cache, format is number plus unit or pure number (seconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.conn_retry_max_duration_ms"}),(0,d.jsx)(r.td,{children:"2 * 60 * 1000"}),(0,d.jsx)(r.td,{children:"Maximum duration for connection retry (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.conn_retry_min_sleep_ms"}),(0,d.jsx)(r.td,{children:"300"}),(0,d.jsx)(r.td,{children:"Minimum sleep time for connection retry (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.conn_retry_max_sleep_ms"}),(0,d.jsx)(r.td,{children:"10 * 1000"}),(0,d.jsx)(r.td,{children:"Maximum sleep time for connection retry (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.rpc_retry_max_duration_ms"}),(0,d.jsx)(r.td,{children:"5 * 60 * 1000"}),(0,d.jsx)(r.td,{children:"Maximum duration for RPC request retry (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.rpc_retry_min_sleep_ms"}),(0,d.jsx)(r.td,{children:"300"}),(0,d.jsx)(r.td,{children:"Minimum sleep time for RPC request retry (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.rpc_retry_max_sleep_ms"}),(0,d.jsx)(r.td,{children:"30 * 1000"}),(0,d.jsx)(r.td,{children:"Maximum sleep time for RPC request retry (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.rpc_close_idle"}),(0,d.jsx)(r.td,{children:"true"}),(0,d.jsx)(r.td,{children:"Whether to close idle RPC connections"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.conn_timeout_ms"}),(0,d.jsx)(r.td,{children:"30 * 1000"}),(0,d.jsx)(r.td,{children:"Connection timeout (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.rpc_timeout_ms"}),(0,d.jsx)(r.td,{children:"120 * 1000"}),(0,d.jsx)(r.td,{children:"RPC request timeout (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.data_timeout_ms"}),(0,d.jsx)(r.td,{children:"5 * 60 * 1000"}),(0,d.jsx)(r.td,{children:"Data transfer timeout (milliseconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.master_conn_pool_size"}),(0,d.jsx)(r.td,{children:"1"}),(0,d.jsx)(r.td,{children:"Master node connection pool size, testing shows 3 connections perform best, default is 1"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.enable_read_ahead"}),(0,d.jsx)(r.td,{children:"true"}),(0,d.jsx)(r.td,{children:"Whether to enable read-ahead functionality"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.read_ahead_len"}),(0,d.jsx)(r.td,{children:"0"}),(0,d.jsx)(r.td,{children:"Read-ahead length (bytes), default value is read_chunk_size * read_chunk_num"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.drop_cache_len"}),(0,d.jsx)(r.td,{children:"0"}),(0,d.jsx)(r.td,{children:"Drop cache length (bytes)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"client.failed_worker_ttl_str"}),(0,d.jsx)(r.td,{children:"10m"}),(0,d.jsx)(r.td,{children:"Worker node blacklist expiration time"})]})]})]}),"\n",(0,d.jsx)(r.h2,{id:"fuse-configuration",children:"FUSE Configuration"}),"\n",(0,d.jsxs)(r.table,{children:[(0,d.jsx)(r.thead,{children:(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.th,{children:"Configuration Item"}),(0,d.jsx)(r.th,{children:"Default Value"}),(0,d.jsx)(r.th,{children:"Description"})]})}),(0,d.jsxs)(r.tbody,{children:[(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.debug"}),(0,d.jsx)(r.td,{children:"false"}),(0,d.jsx)(r.td,{children:"Whether to output request/response logs"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.io_threads"}),(0,d.jsx)(r.td,{children:"32"}),(0,d.jsx)(r.td,{children:"Number of I/O threads"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.worker_threads"}),(0,d.jsx)(r.td,{children:"CPU cores * 2"}),(0,d.jsx)(r.td,{children:"Number of worker threads"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.mnt_path"}),(0,d.jsx)(r.td,{children:"/curvine-fuse"}),(0,d.jsx)(r.td,{children:"Mount path"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.fs_path"}),(0,d.jsx)(r.td,{children:"/"}),(0,d.jsx)(r.td,{children:"Specifies the root path of filesystem accessed by mount point"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.mnt_number"}),(0,d.jsx)(r.td,{children:"1"}),(0,d.jsx)(r.td,{children:"Number of mount points"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.mnt_per_task"}),(0,d.jsx)(r.td,{children:"0 (initialized to io_threads value if 0)"}),(0,d.jsx)(r.td,{children:"Number of tasks that can read/write data per mount point"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.clone_fd"}),(0,d.jsx)(r.td,{children:"true"}),(0,d.jsx)(r.td,{children:"Whether to enable clone fd functionality"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.fuse_channel_size"}),(0,d.jsx)(r.td,{children:"0"}),(0,d.jsx)(r.td,{children:"Fuse request queue size, 0 uses unbounded queue"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.stream_channel_size"}),(0,d.jsx)(r.td,{children:"0"}),(0,d.jsx)(r.td,{children:"Read/write file request queue size, 0 uses unbounded queue"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.fuse_opts"}),(0,d.jsx)(r.td,{children:"[]"}),(0,d.jsx)(r.td,{children:"Mount configuration, needs to be passed to Linux kernel"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.umask"}),(0,d.jsx)(r.td,{children:"022"}),(0,d.jsx)(r.td,{children:"Overrides permission bits set by filesystem in st_mode, represented in octal"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.uid"}),(0,d.jsx)(r.td,{children:"sys::get_uid()"}),(0,d.jsx)(r.td,{children:"User ID"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.gid"}),(0,d.jsx)(r.td,{children:"sys::get_gid()"}),(0,d.jsx)(r.td,{children:"Group ID"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.auto_cache"}),(0,d.jsx)(r.td,{children:"false"}),(0,d.jsx)(r.td,{children:"Whether to enable auto-cache"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.read_dir_fill_ino"}),(0,d.jsx)(r.td,{children:"true"}),(0,d.jsx)(r.td,{children:"Whether to fill fuse node ID when traversing directories"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.entry_timeout"}),(0,d.jsx)(r.td,{children:"1.0"}),(0,d.jsx)(r.td,{children:"Name lookup cache time (seconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.negative_timeout"}),(0,d.jsx)(r.td,{children:"0.0"}),(0,d.jsx)(r.td,{children:"Timeout for caching negative lookups (seconds), 0 means disabled"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.attr_timeout"}),(0,d.jsx)(r.td,{children:"1.0"}),(0,d.jsx)(r.td,{children:"Cache time for file and directory attributes (seconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.ac_attr_timeout"}),(0,d.jsx)(r.td,{children:"1.0"}),(0,d.jsx)(r.td,{children:"Timeout for file attribute cache during auto-cache refresh (seconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.ac_attr_timeout_set"}),(0,d.jsx)(r.td,{children:"1.0"}),(0,d.jsx)(r.td,{children:"Timeout for file attribute cache during auto-cache refresh (seconds)"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.remember"}),(0,d.jsx)(r.td,{children:"false"}),(0,d.jsx)(r.td,{children:"Whether filesystem remembers opened files and directories"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.max_background"}),(0,d.jsx)(r.td,{children:"256"}),(0,d.jsx)(r.td,{children:"Maximum concurrent execution of background tasks in filesystem"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.congestion_threshold"}),(0,d.jsx)(r.td,{children:"192"}),(0,d.jsx)(r.td,{children:"Congestion threshold"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.node_cache_size"}),(0,d.jsx)(r.td,{children:"200000"}),(0,d.jsx)(r.td,{children:"Inode cache capacity"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.node_cache_timeout"}),(0,d.jsx)(r.td,{children:"1h"}),(0,d.jsx)(r.td,{children:"Inode cache lifetime"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.direct_io"}),(0,d.jsx)(r.td,{children:"true"}),(0,d.jsx)(r.td,{children:"File and directory related options, whether to enable direct I/O"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.kernel_cache"}),(0,d.jsx)(r.td,{children:"false"}),(0,d.jsx)(r.td,{children:"File and directory related options, whether to enable kernel cache"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.cache_readdir"}),(0,d.jsx)(r.td,{children:"false"}),(0,d.jsx)(r.td,{children:"File and directory related options, whether to cache directory read results"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.non_seekable"}),(0,d.jsx)(r.td,{children:"false"}),(0,d.jsx)(r.td,{children:"File and directory related options, whether in non-seekable mode"})]}),(0,d.jsxs)(r.tr,{children:[(0,d.jsx)(r.td,{children:"fuse.log"}),(0,d.jsx)(r.td,{children:(0,d.jsx)(r.code,{children:'{level: "info", log_dir: "stdout"}'})}),(0,d.jsx)(r.td,{children:"FUSE log configuration, defaults to stdout output"})]})]})]})]})}function a(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(o,{...e})}):o(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>n,x:()=>c});var s=t(6540);const d={},i=s.createContext(d);function n(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:n(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);