"use strict";(self.webpackChunkcurvine_doc=self.webpackChunkcurvine_doc||[]).push([[5],{8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>d});var r=s(6540);const t={},i=r.createContext(t);function c(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:c(e.components),r.createElement(i.Provider,{value:n},e.children)}},9862:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>o,frontMatter:()=>c,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"Benchmark/concurrent","title":"Concurrent Performance Testing","description":"This chapter introduces the methods and results of Curvine concurrent performance testing.","source":"@site/docs/4-Benchmark/02-concurrent.md","sourceDirName":"4-Benchmark","slug":"/Benchmark/concurrent","permalink":"/docs/Benchmark/concurrent","draft":false,"unlisted":false,"editUrl":"https://github.com/curvineio/curvine-doc/edit/main/docs/4-Benchmark/02-concurrent.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Metadata Performance Testing","permalink":"/docs/Benchmark/meta"},"next":{"title":"FIO Performance Testing","permalink":"/docs/Benchmark/fio"}}');var t=s(4848),i=s(8453);const c={},d="Concurrent Performance Testing",l={},h=[{value:"Test Environment",id:"test-environment",level:2},{value:"Test Tools",id:"test-tools",level:2},{value:"Client Test Results",id:"client-test-results",level:2},{value:"FUSE Test Results",id:"fuse-test-results",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"concurrent-performance-testing",children:"Concurrent Performance Testing"})}),"\n",(0,t.jsx)(n.p,{children:"This chapter introduces the methods and results of Curvine concurrent performance testing."}),"\n",(0,t.jsx)(n.h2,{id:"test-environment",children:"Test Environment"}),"\n",(0,t.jsx)(n.p,{children:"The test machine configuration is as follows:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"CPU: 80 cores"}),"\n",(0,t.jsx)(n.li,{children:"Memory: 256GB"}),"\n",(0,t.jsx)(n.li,{children:"Disk: 1 SSD"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"test-tools",children:"Test Tools"}),"\n",(0,t.jsx)(n.p,{children:"Using Curvine's built-in performance testing tools for testing. The test tools are located in the bin directory:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"curvine-bench: Testing using Rust client"}),"\n",(0,t.jsx)(n.li,{children:"java-bench: Testing using Java client"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Test case: Using 40 threads to concurrently read and write 1000 files, each file size is 100MB; for disk read testing, page cache needs to be cleared each time."}),"\n",(0,t.jsx)(n.p,{children:"Rust client testing, modify bin/curvine-bench.sh:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"${CURVINE_HOME}/lib/curvine-bench \\\n--action ${ACTION} \\\n--dir $DIR \\\n--conf $CURVINE_HOME/conf/curvine-cluster.toml \\\n--checksum true \\\n--client-threads 40 \\\n--buf-size 128KB \\\n--file-size 100MB \\\n--file-num 1000 \\\n"})}),"\n",(0,t.jsx)(n.p,{children:"Java client testing, modify bin/java-bench.sh:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"java -Xms10g -Xmx10g \\\n-Dcurvine.conf.dir=${CURVINE_HOME}/conf \\\nio.curvine.bench.CurvineBenchV2 \\\n-action $ACTION \\\n-dataDir $DIR \\\n-threads 40 \\\n-bufferSize 128kb \\\n-fileSize 100mb \\\n-fileNum 1000 \\\n-checksum true \\\n-clearDir fasle\n"})}),"\n",(0,t.jsx)(n.h2,{id:"client-test-results",children:"Client Test Results"}),"\n",(0,t.jsx)(n.p,{children:"Running scripts:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Rust client read/write data\nbin/curvine-bench.sh fs.write\nbin/curvine-bench.sh fs.read\n\n# Java client read/write data\nbin/java-bench.sh fs.write\nbin/java-bench.sh fs.read\n"})}),"\n",(0,t.jsx)(n.p,{children:"Rust client test results:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Operation Type"}),(0,t.jsx)(n.th,{children:"Speed (GiB/s)"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Write Memory"}),(0,t.jsx)(n.td,{children:"11.7"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Read Memory"}),(0,t.jsx)(n.td,{children:"17.3"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Write Disk"}),(0,t.jsx)(n.td,{children:"4.3"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Read Disk"}),(0,t.jsx)(n.td,{children:"3.5"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Java client test results:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Operation Type"}),(0,t.jsx)(n.th,{children:"Speed (GiB/s)"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Write Memory"}),(0,t.jsx)(n.td,{children:"10.1"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Read Memory"}),(0,t.jsx)(n.td,{children:"10.6"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Write Disk"}),(0,t.jsx)(n.td,{children:"4.0"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Read Disk"}),(0,t.jsx)(n.td,{children:"3.5"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"fuse-test-results",children:"FUSE Test Results"}),"\n",(0,t.jsx)(n.p,{children:"Using fuse3 for testing."}),"\n",(0,t.jsx)(n.p,{children:"Running scripts:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Rust file api read/write data\nbin/curvine-bench.sh fuse.write\nbin/curvine-bench.sh fuse.read\n\n# Java file api read/write data\nbin/java-bench.sh fuse.write\nbin/java-bench.sh fuse.read\n"})}),"\n",(0,t.jsx)(n.p,{children:"Rust test results:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Speed (GiB/s)"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Memory Write"}),(0,t.jsx)(n.td,{children:"10.6"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Memory Read"}),(0,t.jsx)(n.td,{children:"11.1"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Disk Write"}),(0,t.jsx)(n.td,{children:"3.5"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Disk Read"}),(0,t.jsx)(n.td,{children:"2.6"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"Java test results:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Type"}),(0,t.jsx)(n.th,{children:"Speed (GiB/s)"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Memory Write"}),(0,t.jsx)(n.td,{children:"9.0"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Memory Read"}),(0,t.jsx)(n.td,{children:"9.3"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Disk Write"}),(0,t.jsx)(n.td,{children:"3.2"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Disk Read"}),(0,t.jsx)(n.td,{children:"2.4"})]})]})]})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}}}]);