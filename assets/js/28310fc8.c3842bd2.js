"use strict";(self.webpackChunkcurvine_doc=self.webpackChunkcurvine_doc||[]).push([[438],{1644:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Deploy/quick-start","title":"Quick Start","description":"This chapter introduces how to quickly start a Curvine cluster and perform read/write data testing.","source":"@site/docs/2-Deploy/01-quick-start.md","sourceDirName":"2-Deploy","slug":"/Deploy/quick-start","permalink":"/docs/Deploy/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/curvineio/curvine-doc/edit/master/docs/2-Deploy/01-quick-start.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"sidebar_position":0},"sidebar":"tutorialSidebar","previous":{"title":"Technical Architecture","permalink":"/docs/Overview/architecture"},"next":{"title":"Deploy Curvine Cluster","permalink":"/docs/Deploy/deploy"}}');var o=r(4848),i=r(8453);const s={sidebar_position:0},c="Quick Start",a={},l=[{value:"Download and Compile Curvine",id:"download-and-compile-curvine",level:2},{value:"Start Local Cluster",id:"start-local-cluster",level:2},{value:"Read/Write Data Testing",id:"readwrite-data-testing",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"quick-start",children:"Quick Start"})}),"\n",(0,o.jsx)(n.p,{children:"This chapter introduces how to quickly start a Curvine cluster and perform read/write data testing."}),"\n",(0,o.jsx)(n.h2,{id:"download-and-compile-curvine",children:"Download and Compile Curvine"}),"\n",(0,o.jsx)(n.p,{children:"Download the source code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/CurvineIO/curvine.git ./\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The downloaded code includes various Dockerfiles for building compilation images in the ",(0,o.jsx)(n.code,{children:"curvine-docker/compile"})," directory. You can choose the appropriate file to build a compilation image. Here's an example using Rocky9 to build a compilation image and start a container for compilation:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd curvine-docker/compile\n\ndocker build -f Dockerfile_rocky9 -t curvine-compile:rocky9 .\n\ndocker run -itd --name curvine-compile \\\n-u root --privileged=true \\\n-v /code:/code  \\\ncurvine-compile:rocky9 /bin/bash\n"})}),"\n",(0,o.jsx)(n.p,{children:"Compile the code (compilation may take several minutes depending on machine performance):"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"docker exec -it curvine-compile /bin/bash\ncd /code/curvine\nsh build/build.sh\n"})}),"\n",(0,o.jsx)(n.h2,{id:"start-local-cluster",children:"Start Local Cluster"}),"\n",(0,o.jsxs)(n.p,{children:["The compiled code is located in the ",(0,o.jsx)(n.code,{children:"build/dist"})," directory. Start a local cluster:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd build/dist\n./bin/restart-all.sh\n"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"restart-all.sh"})," script will start the Curvine master and worker, outputting logs to the ",(0,o.jsx)(n.code,{children:"logs"})," directory. It will also mount a FUSE file system to the ",(0,o.jsx)(n.code,{children:"/curvine-fuse"})," directory."]}),"\n",(0,o.jsx)(n.p,{children:"Verify cluster status:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"./bin/curvine report\n\n# Output:\n       active_master: localhost:8995\n       journal_nodes: 1,localhost:8996\n            capacity: 10.0 GB\n           available: 9.0 GB (90.23%)\n             fs_used: 1000.0 MB (9.77%)\n         non_fs_used: 30.4 GB\n     live_worker_num: 1\n     lost_worker_num: 0\n           inode_num: 0\n           block_num: 0\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Access Master web UI: ",(0,o.jsx)(n.code,{children:"http://your-hostname:9000"}),"\nAccess Worker web UI: ",(0,o.jsx)(n.code,{children:"http://your-hostname:9001"})]}),"\n",(0,o.jsxs)(n.p,{children:["Access FUSE local mount point: ",(0,o.jsx)(n.code,{children:"ls /curvine-fuse"})]}),"\n",(0,o.jsx)(n.h2,{id:"readwrite-data-testing",children:"Read/Write Data Testing"}),"\n",(0,o.jsxs)(n.p,{children:["Curvine provides benchmark tools for testing read/write performance. In this quick start, we can use these scripts for read/write data testing. The benchmark tools are available in both Rust and Java versions, located in the ",(0,o.jsx)(n.code,{children:"bin"})," directory:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Rust version\nbin/curvine-bench.sh fs.write # Write data using Rust client\nbin/curvine-bench.sh fs.read  # Read data using Rust client\n\nbin/curvine-bench.sh fuse.write # Write data using FUSE\nbin/curvine-bench.sh fuse.read  # Read data using FUSE\n\n# Java version\nbin/java-bench.sh fs.write # Write data using Java client\nbin/java-bench.sh fs.read  # Read data using Java client\n\nbin/java-bench.sh fuse.write # Write data using FUSE\nbin/java-bench.sh fuse.read  # Read data using FUSE\n"})}),"\n",(0,o.jsx)(n.p,{children:"Use command-line tools to check file system status:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"bin/curvine fs -ls /fs-bench\n\n# Output:\nFound 10 items\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/0\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/1\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/2\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/3\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/4\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/5\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/6\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/7\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/8\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/9\n"})}),"\n",(0,o.jsxs)(n.p,{children:["As you can see, we created 10 files in the ",(0,o.jsx)(n.code,{children:"fs-bench"})," directory, each with a size of 100MB."]}),"\n",(0,o.jsx)(n.p,{children:"You can also use Linux command-line tools to check the file system status:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"ls -l /curvine-fuse/fs-bench\n\n# Output:\ntotal 1024000\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 0\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 1\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 2\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 3\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 4\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 5\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 6\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 7\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 8\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 9\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>c});var t=r(6540);const o={},i=t.createContext(o);function s(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);