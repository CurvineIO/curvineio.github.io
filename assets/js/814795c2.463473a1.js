"use strict";(self.webpackChunkcurvine_doc=self.webpackChunkcurvine_doc||[]).push([[9952],{5769:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>l,frontMatter:()=>s,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"User-Manuals/cache","title":"Cache","description":"This chapter introduces how to cache data.","source":"@site/docs/3-User-Manuals/02-cache.md","sourceDirName":"3-User-Manuals","slug":"/User-Manuals/cache","permalink":"/docs/User-Manuals/cache","draft":false,"unlisted":false,"editUrl":"https://github.com/curvineio/curvine-doc/edit/main/docs/3-User-Manuals/02-cache.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Data Orchestration","permalink":"/docs/User-Manuals/ufs"},"next":{"title":"Command Line Tools","permalink":"/docs/User-Manuals/cli"}}');var c=a(4848),i=a(8453);const s={},o="Cache",r={},d=[{value:"Automatic Caching",id:"automatic-caching",level:2},{value:"Active Data Loading",id:"active-data-loading",level:2},{value:"Cache Data Consistency",id:"cache-data-consistency",level:2}];function h(e){const t={admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,c.jsxs)(c.Fragment,{children:[(0,c.jsx)(t.header,{children:(0,c.jsx)(t.h1,{id:"cache",children:"Cache"})}),"\n",(0,c.jsx)(t.p,{children:"This chapter introduces how to cache data."}),"\n",(0,c.jsx)(t.h2,{id:"automatic-caching",children:"Automatic Caching"}),"\n",(0,c.jsx)(t.p,{children:"After mounting UFS to Curvine, if automatic caching is configured, Curvine will submit an asynchronous caching task when reading a UFS file for the first time, loading the data into Curvine.\nIn the logs, you can see the following output:"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{children:"Submit async cache successfully for s3://bucket/cache/test.log, job res CacheJobResult { job_id: 7c00853f-13c8-43c1-8b3f-44740750b5a0, target_path: /s3/cache/test.log }    \n"})}),"\n",(0,c.jsx)(t.p,{children:"You can query the cache task status using job_id:"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{children:"bin/cv load-status 7c00853f-13c8-43c1-8b3f-44740750b5a0\n"})}),"\n",(0,c.jsx)(t.h2,{id:"active-data-loading",children:"Active Data Loading"}),"\n",(0,c.jsx)(t.p,{children:"You can use the load command to actively load UFS data into Curvine, as shown in the example below:"}),"\n",(0,c.jsx)(t.pre,{children:(0,c.jsx)(t.code,{children:"bin/cv load s3://bucket/cache/test.log\n"})}),"\n",(0,c.jsx)(t.p,{children:"Automatic caching and active caching do not conflict with each other. Active caching can reduce the time of first reading UFS files."}),"\n",(0,c.jsx)(t.admonition,{type:"tip",children:(0,c.jsxs)(t.p,{children:["Before loading data, UFS must be mounted to Curvine.",(0,c.jsx)(t.br,{}),"\n","Regardless of automatic caching or active caching, the cache path of the file is fixed and maintains the same directory structure as UFS."]})}),"\n",(0,c.jsx)(t.h2,{id:"cache-data-consistency",children:"Cache Data Consistency"}),"\n",(0,c.jsx)(t.p,{children:"To solve the cache data consistency issue, Curvine provides 3 strategies to verify data consistency:"}),"\n",(0,c.jsxs)(t.ul,{children:["\n",(0,c.jsx)(t.li,{children:"No verification, data will be automatically deleted after expiration; may read dirty data."}),"\n",(0,c.jsx)(t.li,{children:"Periodic verification, checking whether UFS has changed at a certain frequency."}),"\n",(0,c.jsx)(t.li,{children:"Forced verification, checking whether UFS has changed every time a file is read, verifying if the length and last modification time of the UFS file are consistent with what Curvine has saved. This is the default configuration."}),"\n"]}),"\n",(0,c.jsx)(t.p,{children:"If the consistency check fails, data will be read directly from UFS, while asynchronously caching the data to Curvine."})]})}function l(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,c.jsx)(t,{...e,children:(0,c.jsx)(h,{...e})}):h(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>s,x:()=>o});var n=a(6540);const c={},i=n.createContext(c);function s(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);