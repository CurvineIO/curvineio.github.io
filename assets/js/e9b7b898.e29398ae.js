"use strict";(self.webpackChunkcurvine_doc=self.webpackChunkcurvine_doc||[]).push([[9669],{3856:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"Benchmark/meta","title":"Metadata Performance Testing","description":"This chapter introduces the methods and results of Curvine metadata performance testing.","source":"@site/docs/4-Benchmark/01-meta.md","sourceDirName":"4-Benchmark","slug":"/Benchmark/meta","permalink":"/docs/Benchmark/meta","draft":false,"unlisted":false,"editUrl":"https://github.com/curvineio/curvine-doc/edit/main/docs/4-Benchmark/01-meta.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Benchmark","permalink":"/docs/category/benchmark"},"next":{"title":"Concurrent Performance Testing","permalink":"/docs/Benchmark/concurrent"}}');var s=n(4848),i=n(8453);const c={},d="Metadata Performance Testing",o={},a=[{value:"Test Environment",id:"test-environment",level:2},{value:"Test Tools",id:"test-tools",level:2},{value:"Test Results",id:"test-results",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"metadata-performance-testing",children:"Metadata Performance Testing"})}),"\n",(0,s.jsx)(t.p,{children:"This chapter introduces the methods and results of Curvine metadata performance testing."}),"\n",(0,s.jsx)(t.h2,{id:"test-environment",children:"Test Environment"}),"\n",(0,s.jsx)(t.p,{children:"The test machine configuration is as follows:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"CPU: 80 cores"}),"\n",(0,s.jsx)(t.li,{children:"Memory: 128GB"}),"\n",(0,s.jsx)(t.li,{children:"Disk: 1 SSD"}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"test-tools",children:"Test Tools"}),"\n",(0,s.jsx)(t.p,{children:"Using Curvine's built-in performance testing tool for testing. The test tool is located in the bin directory and is named meta-bench. This tool is modified from hdfs nnbench."}),"\n",(0,s.jsx)(t.p,{children:"The test script runs as follows:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"java -Xms10g -Xmx10g \\\nio.curvine.bench.NNBenchWithoutMR \\\n-operation $ACTION \\\n-bytesToWrite 0 \\\n-confDir ${CURVINE_HOME}/conf \\\n-threads 40 \\\n-baseDir /fs-meta \\\n-numFiles 5000\n"})}),"\n",(0,s.jsx)(t.h2,{id:"test-results",children:"Test Results"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Operation Type"}),(0,s.jsx)(t.th,{children:"QPS"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"createWrite"}),(0,s.jsx)(t.td,{children:"19985"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"openRead"}),(0,s.jsx)(t.td,{children:"60376"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"rename"}),(0,s.jsx)(t.td,{children:"43009"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"delete"}),(0,s.jsx)(t.td,{children:"39013"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"createWrite (1kb)"}),(0,s.jsx)(t.td,{children:"11707"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"openRead (1kb)"}),(0,s.jsx)(t.td,{children:"29019"})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>d});var r=n(6540);const s={},i=r.createContext(s);function c(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);