"use strict";(self.webpackChunkcurvine_doc=self.webpackChunkcurvine_doc||[]).push([[438],{1644:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"Deploy/quick-start","title":"Quick Start","description":"This chapter introduces how to quickly start a Curvine cluster and perform read/write data testing.","source":"@site/docs/2-Deploy/01-quick-start.md","sourceDirName":"2-Deploy","slug":"/Deploy/quick-start","permalink":"/docs/Deploy/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/curvineio/curvine-doc/edit/main/docs/2-Deploy/01-quick-start.md","tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"sidebar_position":0},"sidebar":"tutorialSidebar","previous":{"title":"Technical Architecture","permalink":"/docs/Overview/architecture"},"next":{"title":"Deploy Curvine Cluster","permalink":"/docs/Deploy/deploy"}}');var o=i(4848),t=i(8453);const s={sidebar_position:0},c="Quick Start",a={},l=[{value:"Download and Compile Curvine",id:"download-and-compile-curvine",level:2},{value:"Local Compilation",id:"local-compilation",level:3},{value:"Docker Compilation",id:"docker-compilation",level:3},{value:"1. Using Curvine-provided Compilation Images",id:"1-using-curvine-provided-compilation-images",level:4},{value:"2. Advanced: Build Your Own Compilation Image",id:"2-advanced-build-your-own-compilation-image",level:4},{value:"Start Local Cluster",id:"start-local-cluster",level:2},{value:"Read/Write Data Testing",id:"readwrite-data-testing",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"quick-start",children:"Quick Start"})}),"\n",(0,o.jsx)(n.p,{children:"This chapter introduces how to quickly start a Curvine cluster and perform read/write data testing."}),"\n",(0,o.jsx)(n.h2,{id:"download-and-compile-curvine",children:"Download and Compile Curvine"}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Supported Linux Distributions"})}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{children:"OS Distribution"}),(0,o.jsx)(n.th,{children:"Kernel Requirement"}),(0,o.jsx)(n.th,{children:"Tested Version"}),(0,o.jsx)(n.th,{children:"Dependencies"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"CentOS 7"})}),(0,o.jsx)(n.td,{children:"\u22653.10.0"}),(0,o.jsx)(n.td,{children:"7.6"}),(0,o.jsx)(n.td,{children:"fuse2-2.9.2"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"CentOS 8"})}),(0,o.jsx)(n.td,{children:"\u22654.18.0"}),(0,o.jsx)(n.td,{children:"8.5"}),(0,o.jsx)(n.td,{children:"fuse3-3.9.1"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"Rocky Linux 9"})}),(0,o.jsx)(n.td,{children:"\u22655.14.0"}),(0,o.jsx)(n.td,{children:"9.5"}),(0,o.jsx)(n.td,{children:"fuse3-3.10.2"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"RHEL 9"})}),(0,o.jsx)(n.td,{children:"\u22655.14.0"}),(0,o.jsx)(n.td,{children:"9.5"}),(0,o.jsx)(n.td,{children:"fuse3-3.10.2"})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{children:(0,o.jsx)(n.strong,{children:"Ubuntu 22"})}),(0,o.jsx)(n.td,{children:"\u22655.15.0"}),(0,o.jsx)(n.td,{children:"22.4"}),(0,o.jsx)(n.td,{children:"fuse3-3.10.5"})]})]})]}),"\n",(0,o.jsx)(n.p,{children:"Download the source code:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/CurvineIO/curvine.git ./\n"})}),"\n",(0,o.jsx)(n.h3,{id:"local-compilation",children:"Local Compilation"}),"\n",(0,o.jsxs)(n.admonition,{type:"warning",children:[(0,o.jsxs)(n.p,{children:["Please ensure that the prerequisite dependencies are installed and configured in the environment variables. For the installation process of related environment dependencies, you can refer to the ",(0,o.jsx)(n.a,{href:"prerequisites",children:"Environment Initialization Tutorial"})]}),(0,o.jsx)(n.p,{children:"or"}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/CurvineIO/curvine/blob/main/curvine-docker/compile/Dockerfile_rocky9",children:"Docker Environment Initialization"})})]}),"\n",(0,o.jsxs)(n.p,{children:["Then, use the make command for full compilation. The compiled results are located in ",(0,o.jsx)(n.code,{children:"build/dist"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"make all\n"})}),"\n",(0,o.jsxs)(n.admonition,{type:"note",children:[(0,o.jsxs)(n.p,{children:["For more make parameters, you can type ",(0,o.jsx)(n.code,{children:"make"})," or ",(0,o.jsx)(n.code,{children:"make help"})," to view, as shown below:"]}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"Curvine Build System - Available Commands:\n\nEnvironment:\n  make check-env                   - Check build environment dependencies\n\nBuilding:\n  make build [MODE=debug|release]  - Check environment, format and build the entire project (default: release)\n  make all                         - Same as 'make build'\n  make format                      - Format code using pre-commit hooks\n\nIndividual Components:\n  make fuse [MODE=debug|release]   - Build curvine-fuse component only\n  make server [MODE=debug|release] - Build curvine-server component only\n  make cli [MODE=debug|release]    - Build curvine-cli component only\n  make ufs [MODE=debug|release]    - Build curvine-ufs component only\n\nDocker:\n  make docker-build                - Build using Docker compilation image\n  make docker-build-cached         - Build using cached Docker compilation image\n  make docker-build-img            - Build compilation Docker image (interactive)\n\nOther:\n  make cargo ARGS='<args>'         - Run arbitrary cargo commands\n  make help                        - Show this help message\n\nParameters:\n  MODE=debug     - Build in debug mode (default, faster compilation)\n  MODE=release   - Build in release mode (optimized, slower compilation)\n\nExamples:\n  make build                       - Build entire project in debug mode\n  make build MODE=release          - Build entire project in release mode\n  make server MODE=release         - Build only server component in release mode\n  make cargo ARGS='test --verbose' - Run cargo test with verbose output\n"})})]}),"\n",(0,o.jsx)(n.h3,{id:"docker-compilation",children:"Docker Compilation"}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["If your system environment is macOS or Windows, or your Linux version is not in the ",(0,o.jsx)(n.a,{href:"quick-start/#download-and-compile-curvine",children:"supported list"}),", we recommend using Docker compilation. This allows you to operate safely in an isolated environment without affecting your system environment."]})}),"\n",(0,o.jsx)(n.h4,{id:"1-using-curvine-provided-compilation-images",children:"1. Using Curvine-provided Compilation Images"}),"\n",(0,o.jsxs)(n.p,{children:["Curvine provides compilation images based on ",(0,o.jsx)(n.code,{children:"rocky9"})," on DockerHub:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"curvine/curvine-compile:latest"})," - Minimal image containing only various compilation dependencies"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"curvine/curvine-compile:build-cached"})," - Cached with various project crates dependencies"]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"We recommend using the curvine-compile image as a sandbox development environment, where both compilation and execution run within Docker containers."})}),"\n",(0,o.jsx)(n.p,{children:"For a quick try, you only need to execute:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"make docker-build \n\n# or use the cached image for faster compilation\nmake docker-build-cached\n"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"Persistent Development Container"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd curvine\ndocker run -itd --name curvine-compile \\\n  -u root --privileged=true \\\n  -v .:/workspace \\\n  -w /workspace \\\n  --network host \\\n  curvine/curvine-compile:latest /bin/bash\n\n# The container runs in the background, you can attach directly later\ndocker exec -it curvine-compile /bin/bash\n"})}),"\n",(0,o.jsx)(n.h4,{id:"2-advanced-build-your-own-compilation-image",children:"2. Advanced: Build Your Own Compilation Image"}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"If you encounter network environment issues or cannot conveniently use the official Docker images, you can choose to build your own compilation image locally."})}),"\n",(0,o.jsxs)(n.p,{children:["The downloaded code includes various Dockerfiles for building compilation images in the ",(0,o.jsx)(n.code,{children:"curvine-docker/compile"})," directory. You can choose the appropriate file to build a compilation image. Here's an example using Rocky9 to build a compilation image and start a container for compilation:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd curvine\n\ndocker build -f curvine-docker/compile/Dockerfile_rocky9 -t curvine-compile:rocky9 .\n\ndocker run -itd --name curvine-compile \\\n  -u root --privileged=true \\\n  -v .:/workspace \\\n  -w /workspace \\\n  --network host \\\n  curvine-compile:rocky9 /bin/bash\n\n# After entering the container\nmake all\n\n# The container runs in the background, you can attach directly later\n# docker exec -it curvine-compile /bin/bash\n"})}),"\n",(0,o.jsxs)(n.admonition,{type:"warning",children:[(0,o.jsx)(n.p,{children:"If there are significant differences between your compilation image's OS version and the host machine's OS version, or they are not from the same distribution, the Docker-compiled artifacts may not run directly on the host machine due to libc or ABI incompatibilities."}),(0,o.jsx)(n.p,{children:"Therefore, for Docker-compiled artifacts, we strongly recommend running them on the same OS version or within Docker containers!"})]}),"\n",(0,o.jsx)(n.h2,{id:"start-local-cluster",children:"Start Local Cluster"}),"\n",(0,o.jsxs)(n.p,{children:["The compiled artifacts are located in the ",(0,o.jsx)(n.code,{children:"build/dist"})," directory. Start a local cluster:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"cd build/dist\n./bin/restart-all.sh\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"If you used a Docker container during the compilation stage, we recommend running Curvine in the same container as well."})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"restart-all.sh"})," script will start the Curvine master and worker, outputting logs to the ",(0,o.jsx)(n.code,{children:"logs"})," directory. It will also mount a FUSE file system to the ",(0,o.jsx)(n.code,{children:"/curvine-fuse"})," directory."]}),"\n",(0,o.jsx)(n.p,{children:"Verify cluster status:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"./bin/cv report\n\n# Output:\n     active_master: localhost:8995\n       journal_nodes: 1,localhost:8996\n            capacity: 0.0B\n           available: 0.0B (0.00%)\n             fs_used: 14.0B (0.00%)\n         non_fs_used: 0.0B\n     live_worker_num: 1\n     lost_worker_num: 0\n           inode_num: 2\n           block_num: 1\n    live_worker_list: 192.168.xxx.xxx:8997,0.0B/0.0B (0.00%)\n    lost_worker_list:\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Access Master web UI: ",(0,o.jsx)(n.code,{children:"http://your-hostname:9000"}),"\nAccess Worker web UI: ",(0,o.jsx)(n.code,{children:"http://your-hostname:9001"})]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["If you are using a Docker container, please ensure you use ",(0,o.jsx)(n.code,{children:"--network host"})," or add port mappings ",(0,o.jsx)(n.code,{children:"9000,9001,8995,8996"})," to ensure proper access from the host machine."]})}),"\n",(0,o.jsxs)(n.p,{children:["Access FUSE local mount point: ",(0,o.jsx)(n.code,{children:"ls /curvine-fuse"})]}),"\n",(0,o.jsx)(n.h2,{id:"readwrite-data-testing",children:"Read/Write Data Testing"}),"\n",(0,o.jsxs)(n.p,{children:["Curvine provides benchmark tools for testing read/write performance. In this quick start, we can use these scripts for read/write data testing. The benchmark tools are available in both Rust and Java versions, located in the ",(0,o.jsx)(n.code,{children:"bin"})," directory:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"# Rust version\nbin/curvine-bench.sh fs.write # Write data using Rust client\nbin/curvine-bench.sh fs.read  # Read data using Rust client\n\nbin/curvine-bench.sh fuse.write # Write data using FUSE\nbin/curvine-bench.sh fuse.read  # Read data using FUSE\n\n# Java version\nbin/java-bench.sh fs.write # Write data using Java client\nbin/java-bench.sh fs.read  # Read data using Java client\n\nbin/java-bench.sh fuse.write # Write data using FUSE\nbin/java-bench.sh fuse.read  # Read data using FUSE\n"})}),"\n",(0,o.jsx)(n.p,{children:"Use command-line tools to check file system status:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"bin/cv fs -ls /fs-bench\n\n# Output:\nFound 10 items\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/0\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/1\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/2\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/3\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/4\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/5\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/6\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/7\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/8\n-rwxrwxrwx   1 root  104857600 2024-12-26 11:31 /fs-bench/9\n"})}),"\n",(0,o.jsxs)(n.p,{children:["As you can see, we created 10 files in the ",(0,o.jsx)(n.code,{children:"fs-bench"})," directory, each with a size of 100MB."]}),"\n",(0,o.jsx)(n.p,{children:"You can also use Linux command-line tools to check the file system status:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"ls -l /curvine-fuse/fs-bench\n\n# Output:\ntotal 1024000\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 0\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 1\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 2\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 3\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 4\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 5\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 6\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 7\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 8\n-rwxrwxrwx. 1 root root 104857600 Jun  5 17:58 9\n"})})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>c});var r=i(6540);const o={},t=r.createContext(o);function s(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);