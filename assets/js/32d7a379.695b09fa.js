"use strict";(self.webpackChunkcurvine_doc=self.webpackChunkcurvine_doc||[]).push([[8171],{8453:(n,e,s)=>{s.d(e,{R:()=>l,x:()=>t});var i=s(6540);const o={},r=i.createContext(o);function l(n){const e=i.useContext(r);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function t(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:l(n.components),i.createElement(r.Provider,{value:e},n.children)}},9809:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>a,contentTitle:()=>t,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Deploy/prerequisites","title":"Environment Initialization","description":"This chapter provides detailed environment initialization instructions for different common development environments, including rocky9, centos8, ubuntu22.04+, and macOS.","source":"@site/docs/2-Deploy/03-prerequisites.md","sourceDirName":"2-Deploy","slug":"/Deploy/prerequisites","permalink":"/docs/Deploy/prerequisites","draft":false,"unlisted":false,"editUrl":"https://github.com/curvineio/curvine-doc/edit/main/docs/2-Deploy/03-prerequisites.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Deploy Curvine Cluster","permalink":"/docs/Deploy/deploy"},"next":{"title":"User Manuals","permalink":"/docs/category/user-manuals"}}');var o=s(4848),r=s(8453);const l={sidebar_position:2},t="Environment Initialization",a={},c=[{value:"Rocky9/CentOS8 Single Machine Environment Installation",id:"rocky9centos8-single-machine-environment-installation",level:2},{value:"System Preparation",id:"system-preparation",level:3},{value:"Basic Development Tools Installation",id:"basic-development-tools-installation",level:3},{value:"Rust Environment Installation",id:"rust-environment-installation",level:3},{value:"Protobuf Installation",id:"protobuf-installation",level:3},{value:"Maven Installation",id:"maven-installation",level:3},{value:"Environment Variables Configuration",id:"environment-variables-configuration",level:3},{value:"Environment Verification",id:"environment-verification",level:3},{value:"Common Issue Troubleshooting",id:"common-issue-troubleshooting",level:3},{value:"Compilation Preparation",id:"compilation-preparation",level:3},{value:"macOS Environment Installation",id:"macos-environment-installation",level:2},{value:"System Preparation",id:"system-preparation-1",level:3},{value:"Basic Development Tools Installation",id:"basic-development-tools-installation-1",level:3},{value:"Rust Environment Installation",id:"rust-environment-installation-1",level:3},{value:"Protobuf Installation",id:"protobuf-installation-1",level:3},{value:"Maven Installation",id:"maven-installation-1",level:3},{value:"Environment Variables Configuration",id:"environment-variables-configuration-1",level:3},{value:"Environment Verification",id:"environment-verification-1",level:3},{value:"Common Issue Troubleshooting",id:"common-issue-troubleshooting-1",level:3},{value:"Compilation Preparation",id:"compilation-preparation-1",level:3},{value:"Ubuntu 22.04+ Environment Installation",id:"ubuntu-2204-environment-installation",level:2},{value:"System Preparation",id:"system-preparation-2",level:3},{value:"Basic Development Tools Installation",id:"basic-development-tools-installation-2",level:3},{value:"Rust Environment Installation",id:"rust-environment-installation-2",level:3},{value:"Protobuf Installation",id:"protobuf-installation-2",level:3},{value:"Maven Installation",id:"maven-installation-2",level:3},{value:"Environment Variables Configuration",id:"environment-variables-configuration-2",level:3},{value:"Environment Verification",id:"environment-verification-2",level:3},{value:"Common Issue Troubleshooting",id:"common-issue-troubleshooting-2",level:3},{value:"Compilation Preparation",id:"compilation-preparation-2",level:3}];function d(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"environment-initialization",children:"Environment Initialization"})}),"\n",(0,o.jsxs)(e.p,{children:["This chapter provides detailed environment initialization instructions for different common development environments, including ",(0,o.jsx)(e.code,{children:"rocky9"}),", ",(0,o.jsx)(e.code,{children:"centos8"}),", ",(0,o.jsx)(e.code,{children:"ubuntu22.04+"}),", and ",(0,o.jsx)(e.code,{children:"macOS"}),"."]}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Dependencies"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"GCC"}),": version 10 or later (",(0,o.jsx)(e.a,{href:"https://gcc.gnu.org/install/",children:"GCC Installation"}),")"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Rust"}),": version 1.86 or later (",(0,o.jsx)(e.a,{href:"https://www.rust-lang.org/tools/install",children:"Installation Guide"}),")"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Protobuf"}),": version 3.x+ (",(0,o.jsx)(e.a,{href:"https://github.com/protocolbuffers/protobuf/releases/download/v27.2/protoc-27.2-linux-x86_64.zip",children:"Install Guide"}),")"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Maven"}),": version 3.8 or later (",(0,o.jsx)(e.a,{href:"https://maven.apache.org/install.html",children:"Install Guide"}),")"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"LLVM"}),": version 12 or later (",(0,o.jsx)(e.a,{href:"https://llvm.org/docs/GettingStarted.html",children:"Installation Guide"}),")"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"FUSE"}),": libfuse2 or libfuse3 development packages"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"JDK"}),": version 1.8 or later (OpenJDK or Oracle JDK)"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"npm"}),": version 9 or later (",(0,o.jsx)(e.a,{href:"https://nodejs.org/",children:"Node.js Installation"}),")"]}),"\n"]}),"\n",(0,o.jsx)(e.p,{children:"In particular, the protoc compiler version and its supported protocol capabilities reference:"}),"\n",(0,o.jsxs)(e.table,{children:[(0,o.jsx)(e.thead,{children:(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.th,{children:"protoc Version"}),(0,o.jsx)(e.th,{children:"proto2 Support"}),(0,o.jsx)(e.th,{children:"proto3 Support"})]})}),(0,o.jsxs)(e.tbody,{children:[(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"2.x.x"}),(0,o.jsx)(e.td,{children:"\u2705 Only supports"}),(0,o.jsx)(e.td,{children:"\u274c Not supported"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"3.0.0-3.5.x"}),(0,o.jsx)(e.td,{children:"\u2705 Supports"}),(0,o.jsx)(e.td,{children:"\u2705 Supports"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"3.6.0+"}),(0,o.jsx)(e.td,{children:"\u2705 Supports"}),(0,o.jsx)(e.td,{children:"\u2705 Supports"})]}),(0,o.jsxs)(e.tr,{children:[(0,o.jsx)(e.td,{children:"21.0+"}),(0,o.jsx)(e.td,{children:"\u2705 Supports"}),(0,o.jsx)(e.td,{children:"\u2705 Supports"})]})]})]}),"\n",(0,o.jsx)(e.h2,{id:"rocky9centos8-single-machine-environment-installation",children:"Rocky9/CentOS8 Single Machine Environment Installation"}),"\n",(0,o.jsx)(e.h3,{id:"system-preparation",children:"System Preparation"}),"\n",(0,o.jsx)(e.p,{children:"First, ensure your Rocky Linux 9 system is updated to the latest version:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Update system\nsudo dnf update -y\n\n# Install EPEL repository (if additional packages are needed)\nsudo dnf install -y epel-release\n"})}),"\n",(0,o.jsx)(e.h3,{id:"basic-development-tools-installation",children:"Basic Development Tools Installation"}),"\n",(0,o.jsxs)(e.p,{children:["\u26a0\ufe0f ",(0,o.jsx)(e.strong,{children:"Important: Ensure GCC version \u2265 10.0"})]}),"\n",(0,o.jsx)(e.p,{children:"Install basic tools required for compilation and development:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'sudo dnf groupinstall -y "Development Tools"\nsudo dnf install -y \\\n    fuse3 \\\n    fuse3-devel \\\n    clang \\\n    llvm \\\n    llvm-devel \\\n    git \\\n    wget \\\n    curl \\\n    zip \\\n    unzip \\\n    nodejs \\\n    npm \\\n    java-1.8.0-openjdk-devel \\\n    openssl-devel \\\n    pkg-config \\\n    cmake \\\n    autoconf \\\n    automake \\\n    libtool \\\n    gcc-c++ \\\n    && sudo dnf clean all\n'})}),"\n",(0,o.jsx)(e.h3,{id:"rust-environment-installation",children:"Rust Environment Installation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Install Rust (recommended using rustup)\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource ~/.cargo/env\n\n# Verify Rust installation\nrustc --version\ncargo --version\n\n# Ensure Rust version is 1.86 or higher\nrustup update\n"})}),"\n",(0,o.jsx)(e.h3,{id:"protobuf-installation",children:"Protobuf Installation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Download and install Protobuf compiler\ncd /tmp\nwget https://github.com/protocolbuffers/protobuf/releases/download/v27.2/protoc-27.2-linux-x86_64.zip\nunzip protoc-27.2-linux-x86_64.zip\nsudo cp bin/protoc /usr/local/bin/\nsudo cp -r include/* /usr/local/include/\nsudo chmod +x /usr/local/bin/protoc\n\n# Verify installation\nprotoc --version\n"})}),"\n",(0,o.jsx)(e.h3,{id:"maven-installation",children:"Maven Installation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Download and install Maven 3.8+\ncd /opt\nsudo wget https://archive.apache.org/dist/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.tar.gz\nsudo tar -xzf apache-maven-3.9.6-bin.tar.gz\nsudo mv apache-maven-3.9.6 maven\n\n# Configure environment variables\necho 'export MAVEN_HOME=/opt/maven' | sudo tee -a /etc/profile\necho 'export PATH=$MAVEN_HOME/bin:$PATH' | sudo tee -a /etc/profile\nsource /etc/profile\n\n# Verify installation\nmvn --version\n"})}),"\n",(0,o.jsx)(e.h3,{id:"environment-variables-configuration",children:"Environment Variables Configuration"}),"\n",(0,o.jsxs)(e.p,{children:["Add the following content to your ",(0,o.jsx)(e.code,{children:"~/.bashrc"})," or ",(0,o.jsx)(e.code,{children:"~/.zshrc"})," file:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'# Rust environment\nexport PATH="$HOME/.cargo/bin:$PATH"\n\n# Maven environment\nexport MAVEN_HOME=/opt/maven\nexport PATH=$MAVEN_HOME/bin:$PATH\n\n# LLVM environment\nexport LLVM_SYS_120_PREFIX=/usr\n\n# Java environment\nexport JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk\nexport PATH=$JAVA_HOME/bin:$PATH\n\n# PKG_CONFIG path\nexport PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH\n'})}),"\n",(0,o.jsx)(e.p,{children:"Then reload the configuration:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"source ~/.bashrc  # or source ~/.zshrc\n"})}),"\n",(0,o.jsx)(e.h3,{id:"environment-verification",children:"Environment Verification"}),"\n",(0,o.jsx)(e.p,{children:"Verify that all dependencies are correctly installed:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'# Verify basic tools\necho "=== Verifying Basic Tools ==="\ngit --version\nwget --version | head -1\ncurl --version | head -1\nnode --version\nnpm --version\n\n# Verify compilation tools\necho "=== Verifying Compilation Tools ==="\ngcc --version | head -1\nclang --version | head -1\nllvm-config --version\ncmake --version | head -1\n\n# Verify development dependencies\necho "=== Verifying Development Dependencies ==="\nrustc --version\ncargo --version\nprotoc --version\nmvn --version | head -1\njava -version\n\n# Verify FUSE\necho "=== Verifying FUSE ==="\nls -la /usr/include/fuse3/\npkg-config --modversion fuse3\n\necho "=== Environment Configuration Complete ===" \n'})}),"\n",(0,o.jsx)(e.h3,{id:"common-issue-troubleshooting",children:"Common Issue Troubleshooting"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Issue 1: protoc command not found"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Ensure protoc is in PATH\nwhich protoc\n# If not found, check if it was correctly copied to /usr/local/bin/\nls -la /usr/local/bin/protoc\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Issue 2: Maven command not found"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Check if environment variables are effective\necho $MAVEN_HOME\necho $PATH | grep maven\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Issue 3: Rust-related commands not found"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Reload Rust environment\nsource ~/.cargo/env\n# Or reinstall\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Issue 4: GCC version too low (< 10.0)"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Check current GCC version\ngcc --version | head -1\n\n# If version is below 10.0, install newer toolset\nsudo dnf install -y gcc-toolset-11\nscl enable gcc-toolset-11 bash\n\n# Verify updated version\ngcc --version | head -1\n\n# To enable permanently, add to ~/.bashrc\necho 'source /opt/rh/gcc-toolset-11/enable' >> ~/.bashrc\n"})}),"\n",(0,o.jsx)(e.h3,{id:"compilation-preparation",children:"Compilation Preparation"}),"\n",(0,o.jsx)(e.p,{children:"After completing the above installation, your Rocky Linux 9 system will have all the dependency environments required to compile the Curvine project."}),"\n",(0,o.jsx)(e.h2,{id:"macos-environment-installation",children:"macOS Environment Installation"}),"\n",(0,o.jsx)(e.h3,{id:"system-preparation-1",children:"System Preparation"}),"\n",(0,o.jsx)(e.p,{children:"First install Xcode Command Line Tools and Homebrew package manager:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'# Install Xcode Command Line Tools\nxcode-select --install\n\n# Install Homebrew\n/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"\n\n# Update Homebrew\nbrew update\n'})}),"\n",(0,o.jsx)(e.h3,{id:"basic-development-tools-installation-1",children:"Basic Development Tools Installation"}),"\n",(0,o.jsxs)(e.p,{children:["\u26a0\ufe0f ",(0,o.jsx)(e.strong,{children:"Important: Ensure GCC version \u2265 10.0 (if GCC is needed instead of Clang)"})]}),"\n",(0,o.jsx)(e.p,{children:"Use Homebrew to install basic tools required for compilation and development:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"brew install \\\n    git \\\n    wget \\\n    curl \\\n    zip \\\n    unzip \\\n    node \\\n    npm \\\n    openjdk@8 \\\n    openssl \\\n    pkg-config \\\n    cmake \\\n    autoconf \\\n    automake \\\n    libtool \\\n    llvm \\\n    macfuse\n\n# If the project explicitly requires GCC (instead of macOS default Clang), install GCC 11+\nbrew install gcc@11\n\n# Verify versions\necho \"Checking compiler versions:\"\nclang --version | head -1\ngcc-11 --version | head -1  # if GCC is installed\n\n# Note: On macOS, the 'gcc' command is usually an alias for Clang\n# To use real GCC, use specific version commands like gcc-11, g++-11, etc.\n"})}),"\n",(0,o.jsx)(e.h3,{id:"rust-environment-installation-1",children:"Rust Environment Installation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Install Rust (recommended using rustup)\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource ~/.cargo/env\n\n# Verify Rust installation\nrustc --version\ncargo --version\n\n# Ensure Rust version is 1.86 or higher\nrustup update\n"})}),"\n",(0,o.jsx)(e.h3,{id:"protobuf-installation-1",children:"Protobuf Installation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Install Protobuf using Homebrew\nbrew install protobuf\n\n# Verify installation\nprotoc --version\n\n# If you need a specific version, you can also install manually\n# cd /tmp\n# wget https://github.com/protocolbuffers/protobuf/releases/download/v27.2/protoc-27.2-osx-x86_64.zip\n# unzip protoc-27.2-osx-x86_64.zip\n# sudo cp bin/protoc /usr/local/bin/\n# sudo cp -r include/* /usr/local/include/\n"})}),"\n",(0,o.jsx)(e.h3,{id:"maven-installation-1",children:"Maven Installation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Method 1: Install using Homebrew (recommended)\nbrew install maven\n\n# Verify installation\nmvn --version\n\n# Method 2: Manual installation of specific version\n# cd /opt\n# sudo curl -O https://archive.apache.org/dist/maven/maven-3/3.9.11/binaries/apache-maven-3.9.11-bin.tar.gz\n# sudo tar -xzf apache-maven-3.9.11-bin.tar.gz\n# sudo mv apache-maven-3.9.11 maven\n# sudo chown -R $(whoami):staff /opt/maven\n\n# If you choose manual installation, configure environment variables\n# echo 'export MAVEN_HOME=/opt/maven' >> ~/.zshrc\n# echo 'export PATH=$MAVEN_HOME/bin:$PATH' >> ~/.zshrc\n# source ~/.zshrc\n"})}),"\n",(0,o.jsx)(e.h3,{id:"environment-variables-configuration-1",children:"Environment Variables Configuration"}),"\n",(0,o.jsxs)(e.p,{children:["Add the following content to your ",(0,o.jsx)(e.code,{children:"~/.zshrc"})," or ",(0,o.jsx)(e.code,{children:"~/.bash_profile"})," file:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'# Rust environment\nexport PATH="$HOME/.cargo/bin:$PATH"\n\n# Java environment\nexport JAVA_HOME=$(/usr/libexec/java_home -v 1.8)\nexport PATH=$JAVA_HOME/bin:$PATH\n\n# LLVM environment\nexport PATH="$(brew --prefix llvm)/bin:$PATH"\nexport LLVM_SYS_120_PREFIX="$(brew --prefix llvm)"\n\n# PKG_CONFIG path\nexport PKG_CONFIG_PATH="$(brew --prefix)/lib/pkgconfig:$PKG_CONFIG_PATH"\n\n# OpenSSL path (if needed)\nexport OPENSSL_ROOT_DIR="$(brew --prefix openssl)"\nexport OPENSSL_LIB_DIR="$(brew --prefix openssl)/lib"\nexport OPENSSL_INCLUDE_DIR="$(brew --prefix openssl)/include"\n'})}),"\n",(0,o.jsx)(e.p,{children:"Then reload the configuration:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"source ~/.zshrc  # or source ~/.bash_profile\n"})}),"\n",(0,o.jsx)(e.h3,{id:"environment-verification-1",children:"Environment Verification"}),"\n",(0,o.jsx)(e.p,{children:"Verify that all dependencies are correctly installed:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'# Verify basic tools\necho "=== Verifying Basic Tools ==="\ngit --version\nwget --version | head -1\ncurl --version | head -1\nnode --version\nnpm --version\n\n# Verify compilation tools\necho "=== Verifying Compilation Tools ==="\nclang --version | head -1\nllvm-config --version\ncmake --version | head -1\n\n# Verify development dependencies\necho "=== Verifying Development Dependencies ==="\nrustc --version\ncargo --version\nprotoc --version\nmvn --version | head -1\njava -version\n\n# Verify FUSE (macFUSE)\necho "=== Verifying FUSE ==="\nls -la /usr/local/include/fuse/\npkg-config --modversion fuse\n\necho "=== Environment Configuration Complete ==="\n'})}),"\n",(0,o.jsx)(e.h3,{id:"common-issue-troubleshooting-1",children:"Common Issue Troubleshooting"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Issue 1: Permission issues"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# macOS may require disk access permissions\n# System Preferences > Security & Privacy > Privacy > Full Disk Access\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Issue 2: macFUSE not properly installed"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Reinstall macFUSE\nbrew uninstall macfuse\nbrew install --cask macfuse\n# May need to restart the system\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Issue 3: Java version issues"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Check Java versions\n/usr/libexec/java_home -V\n# Switch to Java 8\nexport JAVA_HOME=$(/usr/libexec/java_home -v 1.8)\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Issue 4: GCC version"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# On macOS, 'gcc' is usually an alias for Clang\ngcc --version  # Shows Clang\n\n# If the project explicitly requires GCC 10+, install real GCC\nbrew install gcc@11\nbrew install gcc@12  # or newer version\n\n# Use specific version GCC commands\ngcc-11 --version\ng++-11 --version\n\n# To set GCC as default compiler (not recommended)\n# export CC=gcc-11\n# export CXX=g++-11\n"})}),"\n",(0,o.jsx)(e.h3,{id:"compilation-preparation-1",children:"Compilation Preparation"}),"\n",(0,o.jsx)(e.p,{children:"After completing the above installation, your macOS system will have all the dependency environments required to compile the Curvine project."}),"\n",(0,o.jsx)(e.h2,{id:"ubuntu-2204-environment-installation",children:"Ubuntu 22.04+ Environment Installation"}),"\n",(0,o.jsx)(e.h3,{id:"system-preparation-2",children:"System Preparation"}),"\n",(0,o.jsx)(e.p,{children:"First, ensure your Ubuntu system is updated to the latest version:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Update system\nsudo apt update && sudo apt upgrade -y\n\n# Install necessary certificates and tools\nsudo apt install -y ca-certificates curl gnupg lsb-release\n"})}),"\n",(0,o.jsx)(e.h3,{id:"basic-development-tools-installation-2",children:"Basic Development Tools Installation"}),"\n",(0,o.jsxs)(e.p,{children:["\u26a0\ufe0f ",(0,o.jsx)(e.strong,{children:"Important: Ensure GCC version \u2265 10.0"})]}),"\n",(0,o.jsx)(e.p,{children:"Install basic tools required for compilation and development:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"sudo apt install -y \\\n    build-essential \\\n    libfuse3-dev \\\n    fuse3 \\\n    clang \\\n    llvm \\\n    llvm-dev \\\n    git \\\n    wget \\\n    curl \\\n    zip \\\n    unzip \\\n    nodejs \\\n    npm \\\n    openjdk-8-jdk \\\n    libssl-dev \\\n    pkg-config \\\n    cmake \\\n    autoconf \\\n    automake \\\n    libtool \\\n    gcc \\\n    g++\n\n# Ubuntu 22.04+ provides GCC 11+ by default, if version is too low, install newer version:\n# sudo apt install -y gcc-11 g++-11\n# sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 60\n# sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 60\n"})}),"\n",(0,o.jsx)(e.h3,{id:"rust-environment-installation-2",children:"Rust Environment Installation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Install Rust (recommended using rustup)\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\nsource ~/.cargo/env\n\n# Verify Rust installation\nrustc --version\ncargo --version\n\n# Ensure Rust version is 1.86 or higher\nrustup update\n"})}),"\n",(0,o.jsx)(e.h3,{id:"protobuf-installation-2",children:"Protobuf Installation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Method 1: Install using package manager (recommended)\nsudo apt install -y protobuf-compiler libprotobuf-dev\n\n# Method 2: Manual installation of latest version\n# cd /tmp\n# wget https://github.com/protocolbuffers/protobuf/releases/download/v27.2/protoc-27.2-linux-x86_64.zip\n# unzip protoc-27.2-linux-x86_64.zip\n# sudo cp bin/protoc /usr/local/bin/\n# sudo cp -r include/* /usr/local/include/\n# sudo chmod +x /usr/local/bin/protoc\n\n# Verify installation\nprotoc --version\n"})}),"\n",(0,o.jsx)(e.h3,{id:"maven-installation-2",children:"Maven Installation"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Method 1: Install using package manager\nsudo apt install -y maven\n\n# Method 2: Manual installation of latest version (recommended)\ncd /opt\nsudo wget https://archive.apache.org/dist/maven/maven-3/3.9.6/binaries/apache-maven-3.9.6-bin.tar.gz\nsudo tar -xzf apache-maven-3.9.6-bin.tar.gz\nsudo mv apache-maven-3.9.6 maven\nsudo chown -R root:root /opt/maven\n\n# Configure environment variables\necho 'export MAVEN_HOME=/opt/maven' | sudo tee -a /etc/profile\necho 'export PATH=$MAVEN_HOME/bin:$PATH' | sudo tee -a /etc/profile\nsource /etc/profile\n\n# Verify installation\nmvn --version\n"})}),"\n",(0,o.jsx)(e.h3,{id:"environment-variables-configuration-2",children:"Environment Variables Configuration"}),"\n",(0,o.jsxs)(e.p,{children:["Add the following content to your ",(0,o.jsx)(e.code,{children:"~/.bashrc"})," or ",(0,o.jsx)(e.code,{children:"~/.zshrc"})," file:"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'# Rust environment\nexport PATH="$HOME/.cargo/bin:$PATH"\n\n# Maven environment (if manually installed)\nexport MAVEN_HOME=/opt/maven\nexport PATH=$MAVEN_HOME/bin:$PATH\n\n# Java environment\nexport JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64\nexport PATH=$JAVA_HOME/bin:$PATH\n\n# LLVM environment\nexport LLVM_SYS_120_PREFIX=/usr\n\n# PKG_CONFIG path\nexport PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH\n'})}),"\n",(0,o.jsx)(e.p,{children:"Then reload the configuration:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"source ~/.bashrc  # or source ~/.zshrc\n"})}),"\n",(0,o.jsx)(e.h3,{id:"environment-verification-2",children:"Environment Verification"}),"\n",(0,o.jsx)(e.p,{children:"Verify that all dependencies are correctly installed:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'# Verify basic tools\necho "=== Verifying Basic Tools ==="\ngit --version\nwget --version | head -1\ncurl --version | head -1\nnode --version\nnpm --version\n\n# Verify compilation tools\necho "=== Verifying Compilation Tools ==="\ngcc --version | head -1\nclang --version | head -1\nllvm-config --version\ncmake --version | head -1\n\n# Verify development dependencies\necho "=== Verifying Development Dependencies ==="\nrustc --version\ncargo --version\nprotoc --version\nmvn --version | head -1\njava -version\n\n# Verify FUSE\necho "=== Verifying FUSE ==="\nls -la /usr/include/fuse3/\npkg-config --modversion fuse3\n\necho "=== Environment Configuration Complete ==="\n'})}),"\n",(0,o.jsx)(e.h3,{id:"common-issue-troubleshooting-2",children:"Common Issue Troubleshooting"}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Issue 1: Insufficient permissions"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Ensure user is in the correct group\nsudo usermod -a -G fuse $USER\n# Re-login to take effect\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Issue 2: Node.js version too low"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Use NodeSource repository to install latest version\ncurl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -\nsudo apt-get install -y nodejs\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Issue 3: Java environment issues"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Check installed Java versions\nupdate-java-alternatives --list\n# Switch Java version\nsudo update-alternatives --config java\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Issue 4: FUSE module not loaded"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Load FUSE module\nsudo modprobe fuse\n# Check if module is loaded\nlsmod | grep fuse\n"})}),"\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Issue 5: GCC version too low (< 10.0)"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"# Check current GCC version\ngcc --version | head -1\n\n# Ubuntu 22.04+ provides GCC 11+ by default, if version is too low:\n# Install newer GCC version\nsudo apt install -y gcc-11 g++-11\n\n# Set as default version\nsudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 60\nsudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 60\n\n# Verify updated version\ngcc --version | head -1\ng++ --version | head -1\n\n# If you need to install newer version (like GCC 12)\n# sudo apt install -y gcc-12 g++-12\n# sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 70\n# sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 70\n"})}),"\n",(0,o.jsx)(e.h3,{id:"compilation-preparation-2",children:"Compilation Preparation"}),"\n",(0,o.jsx)(e.p,{children:"After completing the above installation, your Ubuntu 22.04+ system will have all the dependency environments required to compile the Curvine project."})]})}function u(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}}}]);